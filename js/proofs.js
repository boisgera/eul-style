// Generated by CoffeeScript 2.6.1
(function() {
  // TODO: need some "init" phase such that hide at start is not necessary.

  // TODO: need to preserve the event handlers from the section contents.
  var box, hide_proof, main, show_proof;

  hide_proof = function(sectionWrapper) {
    var w$;
    sectionWrapper.removeClass("expanded");
    sectionWrapper.addClass("minimized");
    w$ = function(x) {
      return sectionWrapper.find(x);
    };
    w$(".expand").css({
      visibility: "visible"
    });
    w$(".header-wrapper").css({
      visibility: "visible",
      height: ""
    });
    w$("section").first().css({
      visibility: "hidden",
      height: "0px"
    });
    w$(".header-wrapper").attr({
      id: w$("section").first().attr("id")
    });
    return w$("section").first().attr({
      id: ""
    });
  };

  //  # clone the section, wrap the clone into an invisible div
  //  clone = section.clone(true)
  //  id = section.attr "id"
  //  clone.attr id: id + "---"
  //  div = $("<div></div>")
  //  div.css visibility: "hidden", height: "0"
  //  div.append clone

  //  # create a new minimized section header with a caret down icon.
  //  header = section.find("h3, h4, h5, h6").first().clone()
  //  new_paragraph = $("<div 
  //    class='p' 
  //    style='margin-bottom:0.75rem;'>
  //  </div>")
  //  new_paragraph.append(header) 
  //  new_paragraph.append $("
  //    <i 
  //      class='fa fa-caret-down expand' 
  //      style='cursor:pointer;position:absolute;top:0.75rem;right:0.75rem;'>
  //   </i>")

  //  # replace the content of the section by the mini-header 
  //  # (and hidden clone).
  //  section.empty()
  //  section.append(new_paragraph)
  //  section.append(div)

  //  section.find("i.expand").on "click", -> show_proof(section)
  show_proof = function(sectionWrapper) {
    var w$;
    sectionWrapper.removeClass("minimized");
    sectionWrapper.addClass("expanded");
    w$ = function(x) {
      return sectionWrapper.find(x);
    };
    w$(".expand").css({
      visibility: "hidden"
    });
    w$(".header-wrapper").css({
      visibility: "hidden",
      height: "0"
    });
    w$("section").first().css({
      visibility: "visible",
      height: ""
    });
    w$("section").first().attr({
      id: w$(".header-wrapper").attr("id")
    });
    return w$(".header-wrapper").attr({
      id: ""
    });
  };

  //  # get rid of the minimized proof, restore the section contents.
  //  section.children().first().remove()
  //  div = section.children().first()
  //  _section = div.children().first()
  //  section.html(_section.html())

  //  tombstone = section.find(".tombstone")
  //  tombstone.css 
  //    cursor: "pointer"
  //    position: "absolute"
  //    bottom: "0.75rem"
  //    right: "0.75rem"
  //  tombstone.on "click", -> hide_proof(section)
  box = function(section) {
    var clone, expand, header, headerWrapper, tombstone, wrapper;
    // The section wrapper will take care of bottom spacing now.
    clone = section.clone(true);
    clone.css({
      marginBottom: "0"
    });
    clone.children().last().css({
      marginBottom: "0"
    });
    tombstone = clone.find(".tombstone");
    tombstone.css({
      cursor: "pointer",
      position: "absolute",
      bottom: "0.75rem",
      right: "0.75rem"
    });
    wrapper = $("<div class='proof-wrapper expanded'></div>");
    wrapper.css({
      position: "relative",
      margin: "-0.75rem -0.75rem 0.75rem -0.75rem",
      padding: "0.75rem",
      backgroundColor: "#f9f9f9"
    });
    header = clone.find("h3, h4, h5, h6").first().clone();
    headerWrapper = $("<div class='p header-wrapper' style='margin-bottom:0; visibility:hidden; overflow:hidden; height:0;'> </div>");
    headerWrapper.append(header);
    expand = $("<i class='fa fa-caret-down expand' style='visibility:hidden; cursor:pointer; position:absolute; top:0.75rem; right:0.75rem;'> </i>");
    wrapper.append(headerWrapper);
    wrapper.append(expand);
    wrapper.append(clone);
    expand.on("click", function() {
      return show_proof(wrapper);
    });
    tombstone.on("click", function() {
      return hide_proof(wrapper);
    });
    section.replaceWith(wrapper);
    return wrapper;
  };

  main = function() {
    var header, i, j, len, len1, proof_sections, ref, section, sections, text, wrapper;
    // Find proof sections
    sections = $("section");
    proof_sections = [];
    for (i = 0, len = sections.length; i < len; i++) {
      section = sections[i];
      header = $(section).find("h1, h2, h3, h4, h5, h6").first();
      if (header.length && ((ref = header.prop("tagName")) === "H3" || ref === "H4" || ref === "H5" || ref === "H6")) {
        text = header.text();
        if (text.slice(0, 5) === "Proof") {
          proof_sections.push($(section));
        }
      }
    }
// "Box" them and (optionally) hide them
    for (j = 0, len1 = proof_sections.length; j < len1; j++) {
      section = proof_sections[j];
      wrapper = box(section);
      hide_proof(wrapper);
    }
    return $(document).keydown(function(event) {
      var k, l, len2, len3, ref1, ref2, results, sectionWrapper;
      console.log("***", event.keyCode);
      if (event.keyCode === 88) {
        ref1 = $(".proof-wrapper.minimized");
        for (k = 0, len2 = ref1.length; k < len2; k++) {
          sectionWrapper = ref1[k];
          show_proof($(sectionWrapper));
        }
      }
      if (event.keyCode === 77) {
        ref2 = $(".proof-wrapper.expanded");
        results = [];
        for (l = 0, len3 = ref2.length; l < len3; l++) {
          sectionWrapper = ref2[l];
          results.push(hide_proof($(sectionWrapper)));
        }
        return results;
      }
    });
  };

  $(main);

}).call(this);
